---
- name: Home work 1
  hosts: carrier
  become: yes
  tasks:
    - name: Display Configuration Variables
      ansible.builtin.debug:
        msg:
          - "wordpress: True" # True or False
          - "wordpress_port: 80" # 80 or 8080 or whatewer
          - "wordpress_db_name: {{ mariadb_and_wp_vars.database }}" # WP database name
          - "db_host: {{ mariadb_vars.db_host_original }}" # container name
          - "db_pass: {{ mariadb_vars.root_password }}" # root password
    - name: Update repositories
      ansible.builtin.apt:
        update_cache: yes

    - name: Install ca-certificates and curl packages
      ansible.builtin.apt:
        name: "{{ item }}"
        state: latest
      loop:
        - curl
        - ca-certificates

    - name: Create /etc/apt/keyrings folder
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Set DPKG architecture
      set_fact:
        dpkg_arch: "{{ 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }}"

    - name: Use the variable
      ansible.builtin.debug:
        msg: "The system architecture is {{ dpkg_arch }}"

    - name: Ensure Docker's repository is added
      block:
        - name: Add Docker's official GPG key
          ansible.builtin.get_url:
            url: https://download.docker.com/linux/ubuntu/gpg
            dest: /etc/apt/keyrings/docker.asc

    - name: Add Docker's repository
      ansible.builtin.apt_repository:
        repo: "deb [arch={{ dpkg_arch }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Update repositories
      ansible.builtin.apt:
        update_cache: yes

    - name: Install Docker
      ansible.builtin.apt:
        name: "{{ item }}"
        state: latest
      loop:
        - docker-ce 
        - docker-ce-cli
        - containerd.io

    - name: Ensure Docker is running and enabled
      ansible.builtin.service:
        name: docker
        state: started
        enabled: yes

    - name: Pull Docker images
      community.docker.docker_image:
        name: "{{ item }}"
        tag: latest
        source: pull
      loop:
        - bitnami/mariadb-galera
        - wordpress

    - name: Create a Docker network for WordPress and MariaDB
      community.docker.docker_network:
        name: "{{ item }}"
        driver: bridge
      loop:
        - wp_network


    - name: Ensure MariaDB volume exists
      community.docker.docker_volume:
        name: mariadb_data
        state: present

    - name: Run MariaDB Docker container
      community.docker.docker_container:
        name: "{{ mariadb_vars.db_host_original }}"
        image: bitnami/mariadb-galera:latest
        state: started
        restart_policy: unless-stopped
        volumes:
          - "mariadb_data:/var/lib/mysql"
        networks:
          - name: wp_network
        env:
          MARIADB_GALERA_MARIABACKUP_PASSWORD: "{{ mariadb_vars.backup_password }}"
          MARIADB_ROOT_PASSWORD: "{{ mariadb_vars.root_password }}"
          MARIADB_DATABASE: "{{ mariadb_and_wp_vars.database }}"
          MARIADB_USER: "{{ mariadb_and_wp_vars.user }}"
          MARIADB_PASSWORD: "{{ mariadb_and_wp_vars.password }}"
        ports:
          - "3306:3306"

    - name: Ensure Wordpress volume exists
      community.docker.docker_volume:
        name: wordpress_data
        state: present

    - name: Run Wordpress Docker container
      community.docker.docker_container:
        name: wordpress
        image: wordpress:latest
        state: started
        restart_policy: unless-stopped
        env:
          WORDPRESS_DB_HOST: "{{ mariadb_vars.db_host_original }}"
          WORDPRESS_DB_USER: "{{ mariadb_and_wp_vars.user }}"
          WORDPRESS_DB_PASSWORD: "{{ mariadb_and_wp_vars.password }}"
          WORDPRESS_DB_NAME: "{{ mariadb_and_wp_vars.database }}"
        ports:
          - "80:80"
        networks:
          - name: wp_network
        volumes:
          - "wordpress_data:/var/www/html/"